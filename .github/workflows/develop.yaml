name: Build and Push Image to Google Cloud Platform
on:
  pull_request:
    branches: [ master ]
jobs:
  code_formatting:
    name: Check Code Formatting (Black)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black
    - name: Check code formatting
      run: black --check .

  test_model:
    needs: code_formatting
    name: Test Newly Committed Model
    runs-on: ubuntu-latest
    env: 
      PROJECT_ID: mlops-423810
      MLFLOW_TRACKING_URI: https://mlflow-y3omahtamq-uc.a.run.app
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.ci.txt

        exec "$SHELL"
    - name: Initialize MLflow project
      run: |
        pip install -r requirements.mlflow.txt
        . ./params.env; mlflow run . -e validate --env-manager=local -P run_name="pipeline_validation_${{ github.sha }}"       
    
  deployment:
    needs: test_model
    name: Build and Deploy to GCP
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: mlops-423810
      IMAGE_NAME: mllab
      REGISTRY_LOCATION: us-central1-docker.pkg.dev
      REGISTRY_NAME: ml-repository
      CLUSTER_NAME: primary
      CLUSTER_LOCATION: us-central1-a
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        credentials_json: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT_KEY }}
      
    - name: Configure gcloud CLI
      run: |-
        gcloud config set project ${{ env.PROJECT_ID }}

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.ci.txt

    - name: Build Docker Image
      run: |-
        mlflow run . -e deploy --env-manager=local

    - name: Configure Docker Client
      run: |-
        gcloud auth configure-docker ${{ env.REGISTRY_LOCATION }} --quiet
      
    - name: Set registry path
      run: |-
        echo "CONTAINER_LINK=${{ env.REGISTRY_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV


    - name: Tag Docker image and push to Google Artifact Registry
      run: |-
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.CONTAINER_LINK }}:${{ github.sha }}
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.CONTAINER_LINK }}:latest
        docker push ${{ env.CONTAINER_LINK }}:${{ github.sha }}
        docker push ${{ env.CONTAINER_LINK }}:latest        
      
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        location: ${{ env.CLUSTER_LOCATION }}

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
    
    - name: Kubernetes substitute
      run: |
        envsubst < k8s/deployment.yaml > k8s/deployment.processed.yaml
        rm k8s/deployment.yaml
        mv k8s/deployment.processed.yaml k8s/deployment.yaml
      env:
        CONTAINER: ${{ env.CONTAINER_LINK }}:${{ github.sha }}

    - name: Terraform Apply
      run: |
        cd terraform
        terraform init 
        terraform plan
        terraform apply -auto-approve
      env:
        TF_VAR_mysql_user: ${{ secrets.MYSQL_USER }}
        TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
        GOOGLE_CREDENTIALS: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT_KEY }}